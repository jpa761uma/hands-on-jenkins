pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    environment {
        // Correctly set Docker tool in the environment
        DOCKER_TOOL = 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
    }

    tools {
        // Specify Docker tool using the defined environment variable
        env.DOCKER_TOOL 'docker'
    }

    stages {
        stage("Build") {
            steps {
                script {
                    buildApp()
                }
            }
        }

        stage("Deploy - Dev") {
            steps {
                script {
                    deploy('dev')
                }
            }
        }
    }
}

def buildApp() {
    dir('section_4/code/cd_pipeline') {
        // Use the Docker tool explicitly in the build step
        sh "${env.DOCKER_TOOL} build -t hands-on-jenkins/myapp:${BUILD_NUMBER} ."
    }
}

def deploy(environment) {
    def containerName = ''
    def port = ''

    if (environment == 'dev') {
        containerName = "app_dev"
        port = "8888"
    } else {
        println "Environment not valid"
        System.exit(0)
    }

    // Use the Docker tool explicitly in the deploy steps
    sh "${env.DOCKER_TOOL} ps -f name=${containerName} -q | xargs --no-run-if-empty ${env.DOCKER_TOOL} stop"
    sh "${env.DOCKER_TOOL} ps -a -f name=${containerName} -q | xargs -r ${env.DOCKER_TOOL} rm"
    sh "${env.DOCKER_TOOL} run -d -p ${port}:5000 --name ${containerName} hands-on-jenkins/myapp:${BUILD_NUMBER}"
}
